/**
 *
 * Copyright (c) 1996-1997 Sun Microsystems, Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.
 *
 */

options {
  MULTI=true; // an option for JJTree
              // set to build a multi mode tree
              // (with different types of nodes)
}

PARSER_BEGIN(Prog2)

class Prog2 {
  public static void main(String args[]) {
    System.out.println(">>> Lambda Expression Evaluator <<<");
    System.out.println("Enter an applied Lambda expression:");
    
    Prog2 t = new Prog2(System.in);
    try {
      ASTStart n = t.Start();
      
      System.out.println("");
      System.out.println("The abstract syntax tree:");
      n.dump("");
      
      System.out.println("");
      System.out.println("The Lambda expression in the concrete syntax:");
      System.out.println("");
      
      System.out.println("The abstract syntax tree with free variables:");
      n.dump("");
      
      System.out.println("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Prog2)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN :
{
	<LAMBDA: "L">
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

ASTStart Start() : {}
{
  Expression()
  { return jjtThis; }
}


void Expression() #void : {}
{
  	var()
  |
  	num() | "+" #add(0) | "-" #sub(0) | "*" #mul(0) | "/" #div(0)
  |
  	"(" Expression()("+") ")"
  |
  	"(" <LAMBDA> var()("+") "." Expression()("+") ")"
}

void Application() #void : {}
{
  (
    "(" Expression()("+") ")"
  ) 
}

void Abstraction() #void : {}
{
    ( <LAMBDA> var()("+") "." Application() )*
}

void Body() #void : {}
{
  	"." Application() 
  | 
  	var() Body() #LAMBDA(2)
}
void var() #void : {}
{
 	<IDENTIFIER>
}

void num() #void : {}
{
	<INTEGER_LITERAL>
}

void MyID() :
{
  Token t;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.setName(t.image);
  }
}
